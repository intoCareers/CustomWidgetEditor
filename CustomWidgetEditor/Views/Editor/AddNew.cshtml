@model CustomWidgetEditor.ViewModels.WidgetVm
@using CustomWidgetEditor.Models

@{
  ViewBag.Title = "Details";
  Layout = "~/Views/Shared/_Layout.cshtml";
}

@if ( Model.PlanLibCode == 0 )
{
  <h2>Add Custom Widgets to Database</h2>
}
else
{
  <h2>Edit</h2>
}
@using ( Html.BeginForm( "Save", "Editor", FormMethod.Post, new { id = "save" } ) )
{
  <div class="form-group">
    @if ( Model.StateAbbr == null )
    {
      @Html.DropDownListFor( model => model.State, new SelectList( StatesDictionary.States, "Key", "Value" ), "Select a state", new { @class = "form-control text-center" } )
      @Html.ValidationMessageFor( model => model.State, "State selection is required", new { @class = "text-danger" } )
    }
    else
    {
      @Html.LabelFor( model => model.State, new { @class = "control-label" } )
      @Html.TextBoxFor( model => model.State, new { @class = "form-control", @readonly = "readonly", @title = "Field is read only" } )
    }
  </div>

  <div class="form-group">
    @Html.LabelFor( model => model.ItemTitle, new { @class = "control-label" } )
    @Html.TextBoxFor( model => model.ItemTitle, new { @class = "form-control focus" } )
    @Html.ValidationMessageFor( model => model.ItemTitle, "Title is required", new { @class = "text-danger" } )
  </div>

  <div class="form-group">
    @Html.LabelFor( model => model.ItemDescription, new { @class = "control-label" } )
    @Html.TextAreaFor( model => model.ItemDescription, new { @class = "form-control", rows = 1, style = "style=height:1em; max-width: 70%;" } )
    @Html.ValidationMessageFor( model => model.ItemDescription, "Desciption is required", new { @class = "text-danger" } )
  </div>

  <div class="form-group">
    @Html.LabelFor( model => model.DefaultThreshold, new { @class = "control-label" } )
    @Html.EditorFor( model => model.DefaultThreshold, new { @class = "form-control mr-4", min = "0", max = "100", style = "width: 8%; text-align: center;" } )
  </div>

  <div class="form-group">
    @Html.LabelFor( model => model.FormId, new { @class = "control-label" } )
    @Html.TextBoxFor( model => model.FormId, new { @class = "form-control" } )
    @Html.ValidationMessageFor( model => model.FormId, "Form Id is required", new { @class = "text-danger" } )
  </div>

  @Html.HiddenFor( model => model.PlanLibCode )
  @Html.AntiForgeryToken()
  <button type="submit" class="btn btn-primary">Save</button>
  @Html.ActionLink( "Cancel", "Current", "Editor", new { stateAbbr = Model.StateAbbr }, new { @class = "btn btn-outline-danger" } )
  if ( Model.PlanLibCode == 0 )
  {
    <button type="reset" class="btn-link">Reset</button>
  }
}

@Scripts.Render( "~/bundles/jqueryval" )
@section scripts{
  <script>
    $('textarea').each(function () {
      this.setAttribute('style', 'height:' + (this.scrollHeight) + 'px;overflow-y:hidden;');
    }).on('input', function () {
      this.style.height = 'auto';
      this.style.height = (this.scrollHeight) + 'px';
    });
    $(function () {
      var $input = $(".focus");
      var strLen = $input.val().length * 2;
      $input.focus();
      $input[0].setSelectionRange(strLen, strLen);
    });
  </script>
}
