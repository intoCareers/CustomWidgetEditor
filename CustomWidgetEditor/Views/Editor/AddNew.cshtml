@model CustomWidgetEditor.ViewModels.WidgetVm
@using CustomWidgetEditor.Models

@{
  ViewBag.Title = "Details";
  Layout = "~/Views/Shared/_Layout.cshtml";
}

@if ( Model.PlanLibCode == 0 )
{
  <h2>Add Custom Widgets to Database</h2>
}
else
{
  <h2>Edit</h2>
}
@using ( Html.BeginForm( "Save", "Editor", FormMethod.Post, new { id = "save" } ) )
{
  <div class="form-group">
    @if ( Model.StateAbbr == null )
    {
      @Html.DropDownListFor( model => model.State, new SelectList( StatesDictionary.States, "Key", "Value" ), "Select a state", new { @class = "form-control text-center", @id="states-dropdown" } )
      @Html.ValidationMessageFor( model => model.State, "State selection is required", new { @class = "text-danger" } )
    }
    else
    {
      @Html.LabelFor( model => model.State, new { @class = "control-label" } )
      @Html.TextBoxFor( model => model.State, new { @class = "form-control", @readonly = "readonly", @title = "Field is read only" } )
    }
  </div>

  if ( Model.PlanLibCode == 0 )
  {
    <div class="form-group">
      @Html.LabelFor( model => model.SiteId, new { @class = "control-label" } )
      @Html.DropDownListFor( model => model.SiteId, new SelectList( Model.Sites.Values, Model.Sites.Keys ), "(Optional) Select a site", new { @class = "form-control pl-2", @id="sites-dropdown" } )
    </div>
  }

  <div class="form-group">
    @Html.LabelFor( model => model.ItemTitle, new { @class = "control-label" } )
    @Html.TextBoxFor( model => model.ItemTitle, new { @class = "form-control focus" } )
    @Html.ValidationMessageFor( model => model.ItemTitle, "Title is required", new { @class = "text-danger" } )
  </div>

  <div class="form-group">
    @Html.LabelFor( model => model.ItemDescription, new { @class = "control-label" } )
    @Html.TextAreaFor( model => model.ItemDescription, new { @class = "form-control", @rows = 1, @style = "height:1em; max-width: 70%;" } )
    @Html.ValidationMessageFor( model => model.ItemDescription, "Desciption is required", new { @class = "text-danger" } )
  </div>

  <div class="form-group">
    @Html.LabelFor( model => model.DefaultThreshold, new { @class = "control-label" } )
    @Html.TextBoxFor( model => model.DefaultThreshold, new { @class = "form-control mr-4", type = "number", min = "0", max = "100", style = "max-width: 100px; text-align: center;" } )
  </div>

  <div class="form-group">
    @Html.LabelFor( model => model.FormId, new { @class = "control-label" } )
    @Html.TextBoxFor( model => model.FormId, new { @class = "form-control" } )
    @Html.ValidationMessageFor( model => model.FormId, "Form Id is required", new { @class = "text-danger" } )
  </div>

  @Html.HiddenFor( model => model.PlanLibCode )
  @Html.HiddenFor( model => model.StateAbbr )
  @Html.AntiForgeryToken()
  <button type="submit" class="btn btn-outline-success mr-5">Save</button>
  @Html.ActionLink( "Cancel", "Current", "Editor", new { stateAbbr = Model.StateAbbr }, new { @class = "btn btn-outline-danger" } )
  if ( Model.PlanLibCode == 0 )
  {
    <button type="reset" class="btn-link">Reset</button>
  }
}

@Scripts.Render( "~/bundles/jqueryval" )
@Scripts.Render( "~/bundles/AddNewView" )
